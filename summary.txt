1. Why did you choose the tools, libraries, and language you used for the coding exercise?
I chose Python as my language. I have more experience with full-stack web development using c# for the backend, but since 
it was not necessarily listed (most similar to Java), I took the safe route. Also, I am learning Python currently for data
science purposes, so I wanted to challenge myself to apply my knowledge of building c# apis to learn how to use Flask to 
build a simple Python web app. Flask was perfect for this because it is a microframework for web applications. 
I chose to use operator.itemgetter because it is easier to read than a lambda function when sorting and datetime.datetime 
make it easier for me to sort by timestamps. 

2. What are the advantages and disadvantages of your solution?
My solution offers a simple web interface for managing point transactions that the requirements ask for. Its advantages include ease of use, modularity, 
and error handling. However, it lacks authentication, database integration, and robust validation, which are essential for 
security and data integrity.

What has been a favorite school/personal project thus far? What about it that challenged you?
My favorite school project would have to be the first full-stack web app I made. In MIS 321, Business Programming II, 
combined with MIS 330, Database Administration, I learned the skills to successfully create a full-stack web app. For MIS 321, 
I received a semester-long project and a team to take it on with me. I started as the database admin and team lead, but 
ended up playing a major part in the frontend and backend programming. I believe that without challenges/discomforts,
there is no growth, so I tend to take on challenges where I can to foster my personal growth. This was my first time being in a leadership 
position of a team of developers. It taught me how key communication is between team members and the importance of setting deadlines and delegating duties. 
I say that because those were the biggest challenges my team faced in this project.

P.S. In the app I ignored adding negative points. I know the document says "For any requirements not specified via an example, use your best judgment."
and in an example it has "{ "payer": "DANNON", "points": -200, "timestamp": "2022-10-31T15:00:00Z" }" which causes the points to increase after spending.
I felt this was not fitting and if this feature was to be added, for example, if a user receives more points then they were due, it could take off those points.
The only problem is that with the way things are written, it does not make sense to add negative points, so I ignore those transactions.